syntax = "proto3";

message PublicClientInfo {
  // Required. A random uuid.
  string client_id = 1;

  // Required.
  string name = 2;
}

message PublicServerInfo {
  // Required.
  uint32 tcp_port = 1;

  // Required.
  string name = 2;
}

// All information about the requesting client. Contains both public information and
// information that is privileged to just the client and server.
message ClientInfo {
  // Required. Information about the client that can be shared with other clients.
  PublicClientInfo public_info = 1;
}

// All information about a server that is sharable to connected clients.
message ServerInfo {
}

// This is used to represent changes to a single object.
// TODO(aeidelson): It's unclear how specific this API should be. Should re-evaluate this in the
// future and see if it makes sense to be more restrictive (like seperating updates and adds).
message ObjectDiff {
  // Used whenever the fields of an object are updated, including when the object is new.
  message UpsertObjectModification {
    // Map of field key, value to update/insert.
    map<string, bytes> fields_to_upsert = 1;

    // Repeated list of field keys to delete.
    repeated string field_to_delete = 2;
  }

  message DeletedObjectModfication {
    // No fields needed yet, just the fact that this is populated will signal a deletion.
  }

  // One of these changes can apply.
  oneof modification {
    UpsertObjectModification upserted_object = 1;
    DeletedObjectModfication deleted_object = 2;
  }
}

// Represents some set of changes to the world state. Can be created by either client or
// server.
message WorldStateDiff {
  // A map from object id to changes to that object.
  // If an object doesn't already exist, it will be considered a new object.
  map<string, ObjectDiff> object_change = 1;
}

// Represents an authoritative view of a change in the world, from one world version to another.
message ServerWorldStateDiff {
  // Required. The version of the world that the server believes the client has. The client should
  // re-connect if this is greater than the actual client version (since something went horribly
  // wrong).
  uint64 expected_client_version = 1;
  
  // Required. The new version of the world after the diff is applied.
  // If this is less than the actual client version, the diff should be ignored.
  uint64 new_version = 2;

  // Rquired. Changes for the client to apply locally.
  WorldStateDiff changes = 3;
}

// A single event sent from client to server, used for modifying world state.
message Event {
  // Required. A random uuid generated on the client.
  string event_id = 1;

  // The client that generated the event.
  string acting_client_id = 2;

  // The set of changes the client wants to apply.
  WorldStateDiff changes = 3;
}
